import java.awt.*

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'jacoco'
}
repositories {
    mavenCentral()
}
dependencies {
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    testImplementation "org.junit.platform:junit-platform-suite:1.9.1"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

javafx {
    version = "11"
    modules = ['javafx.controls', 'javafx.fxml']
}

jacoco {
    toolVersion = "0.8.8"
}

application {
    mainClass = 'goodPrice.Main' // class with the main method used by Gradle plugin
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': application.getMainClass()
    }
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    filter {
        excludeTestsMatching "goodPriceTest.MainTest" //Exclude suite, can be in different task
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['goodPrice/**',
                                        'item/ItemCel*',
                                        'item/ItemCellController*'])
        }))
    }
}

task reports {
    dependsOn jacocoTestReport
    doLast {
        def coverage = file("$buildDir\\reports\\jacoco\\test\\html\\index.html").toURI()
        def result = file("$buildDir\\reports\\tests\\test\\index.html").toURI()
        Desktop.desktop.browse result
        Desktop.desktop.browse coverage
    }
}

